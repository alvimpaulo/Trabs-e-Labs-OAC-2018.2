// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/03/2018 12:02:05"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          FPALU
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module FPALU_vlg_vec_tst();
// constants                                           
// general purpose registers
reg iclock;
reg [31:0] idataa;
reg [31:0] idatab;
// wires                                               
wire oCompResult;
wire onan;
wire ooverflow;
wire [31:0] oresult;
wire ounderflow;
wire ozero;

// assign statements (if any)                          
FPALU i1 (
// port map - connection between master ports and signals/registers   
	.iclock(iclock),
	.idataa(idataa),
	.idatab(idatab),
	.oCompResult(oCompResult),
	.onan(onan),
	.ooverflow(ooverflow),
	.oresult(oresult),
	.ounderflow(ounderflow),
	.ozero(ozero)
);
initial 
begin 
#1000000 $finish;
end 

// iclock
always
begin
	iclock = 1'b0;
	iclock = #10000 1'b1;
	#10000;
end 
// idataa[ 31 ]
initial
begin
	idataa[31] = 1'b0;
end 
// idataa[ 30 ]
initial
begin
	idataa[30] = 1'b0;
end 
// idataa[ 29 ]
initial
begin
	idataa[29] = 1'b1;
end 
// idataa[ 28 ]
initial
begin
	idataa[28] = 1'b1;
end 
// idataa[ 27 ]
initial
begin
	idataa[27] = 1'b1;
end 
// idataa[ 26 ]
initial
begin
	idataa[26] = 1'b1;
end 
// idataa[ 25 ]
initial
begin
	idataa[25] = 1'b1;
end 
// idataa[ 24 ]
initial
begin
	idataa[24] = 1'b1;
end 
// idataa[ 23 ]
initial
begin
	idataa[23] = 1'b1;
end 
// idataa[ 22 ]
initial
begin
	idataa[22] = 1'b1;
end 
// idataa[ 21 ]
initial
begin
	idataa[21] = 1'b0;
end 
// idataa[ 20 ]
initial
begin
	idataa[20] = 1'b0;
end 
// idataa[ 19 ]
initial
begin
	idataa[19] = 1'b0;
end 
// idataa[ 18 ]
initial
begin
	idataa[18] = 1'b0;
end 
// idataa[ 17 ]
initial
begin
	idataa[17] = 1'b0;
end 
// idataa[ 16 ]
initial
begin
	idataa[16] = 1'b0;
end 
// idataa[ 15 ]
initial
begin
	idataa[15] = 1'b0;
end 
// idataa[ 14 ]
initial
begin
	idataa[14] = 1'b0;
end 
// idataa[ 13 ]
initial
begin
	idataa[13] = 1'b0;
end 
// idataa[ 12 ]
initial
begin
	idataa[12] = 1'b0;
end 
// idataa[ 11 ]
initial
begin
	idataa[11] = 1'b0;
end 
// idataa[ 10 ]
initial
begin
	idataa[10] = 1'b0;
end 
// idataa[ 9 ]
initial
begin
	idataa[9] = 1'b0;
end 
// idataa[ 8 ]
initial
begin
	idataa[8] = 1'b0;
end 
// idataa[ 7 ]
initial
begin
	idataa[7] = 1'b0;
end 
// idataa[ 6 ]
initial
begin
	idataa[6] = 1'b0;
end 
// idataa[ 5 ]
initial
begin
	idataa[5] = 1'b0;
end 
// idataa[ 4 ]
initial
begin
	idataa[4] = 1'b0;
end 
// idataa[ 3 ]
initial
begin
	idataa[3] = 1'b0;
end 
// idataa[ 2 ]
initial
begin
	idataa[2] = 1'b0;
end 
// idataa[ 1 ]
initial
begin
	idataa[1] = 1'b0;
end 
// idataa[ 0 ]
initial
begin
	idataa[0] = 1'b0;
end 
// idatab[ 31 ]
initial
begin
	idatab[31] = 1'b0;
end 
// idatab[ 30 ]
initial
begin
	idatab[30] = 1'b1;
end 
// idatab[ 29 ]
initial
begin
	idatab[29] = 1'b0;
end 
// idatab[ 28 ]
initial
begin
	idatab[28] = 1'b0;
end 
// idatab[ 27 ]
initial
begin
	idatab[27] = 1'b0;
end 
// idatab[ 26 ]
initial
begin
	idatab[26] = 1'b0;
end 
// idatab[ 25 ]
initial
begin
	idatab[25] = 1'b0;
end 
// idatab[ 24 ]
initial
begin
	idatab[24] = 1'b0;
end 
// idatab[ 23 ]
initial
begin
	idatab[23] = 1'b0;
end 
// idatab[ 22 ]
initial
begin
	idatab[22] = 1'b0;
end 
// idatab[ 21 ]
initial
begin
	idatab[21] = 1'b0;
end 
// idatab[ 20 ]
initial
begin
	idatab[20] = 1'b1;
end 
// idatab[ 19 ]
initial
begin
	idatab[19] = 1'b1;
end 
// idatab[ 18 ]
initial
begin
	idatab[18] = 1'b0;
end 
// idatab[ 17 ]
initial
begin
	idatab[17] = 1'b0;
end 
// idatab[ 16 ]
initial
begin
	idatab[16] = 1'b1;
end 
// idatab[ 15 ]
initial
begin
	idatab[15] = 1'b1;
end 
// idatab[ 14 ]
initial
begin
	idatab[14] = 1'b0;
end 
// idatab[ 13 ]
initial
begin
	idatab[13] = 1'b0;
end 
// idatab[ 12 ]
initial
begin
	idatab[12] = 1'b1;
end 
// idatab[ 11 ]
initial
begin
	idatab[11] = 1'b1;
end 
// idatab[ 10 ]
initial
begin
	idatab[10] = 1'b0;
end 
// idatab[ 9 ]
initial
begin
	idatab[9] = 1'b0;
end 
// idatab[ 8 ]
initial
begin
	idatab[8] = 1'b1;
end 
// idatab[ 7 ]
initial
begin
	idatab[7] = 1'b1;
end 
// idatab[ 6 ]
initial
begin
	idatab[6] = 1'b0;
end 
// idatab[ 5 ]
initial
begin
	idatab[5] = 1'b0;
end 
// idatab[ 4 ]
initial
begin
	idatab[4] = 1'b1;
end 
// idatab[ 3 ]
initial
begin
	idatab[3] = 1'b1;
end 
// idatab[ 2 ]
initial
begin
	idatab[2] = 1'b0;
end 
// idatab[ 1 ]
initial
begin
	idatab[1] = 1'b1;
end 
// idatab[ 0 ]
initial
begin
	idatab[0] = 1'b0;
end 
endmodule

